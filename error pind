
.def	status_flag = r17	//registo utilizado para guardar flags de eventos
.def	num_caps = r22		//regista numero de capsulas presentes na maquina
.def	min_lim = r21		//regista o numero de capsulas presentes na maquina (aquando de VE on) a partil do qual ja se aceitam novas capsulas
.def	maxcap=r23
.equ	sw1=0b11111110
.equ	sw2=0b11111101
.equ	sw3=0b11111011
.equ	sc = 4
.equ	sp = 5
.equ	led_limit6 = 2		//corespondentes a led's			
.equ	led_limit4 = 1
.equ	led_limit2 = 0
   
		//flag indicativo de que o tambor da maquina se encontra vazio
//.equ	add_caps = 5

.cseg
.org	0x00				//vetor de reset com jump para a main			
	jmp	main
.cseg						
.org	0x46				//comeca a escrever no espaco de memoria de programa 0x46
setseg: .dd	0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82	//guarda na memoria de programa a tabela para disp 7seg.
																//atribuindo o nome ao espaco de memoria
main:
//CODIGO PARA INICIAR O STACK POINTER
	ldi r16,low(ramend)
	out spl,r16
	ldi r16,high(ramend)
	out sph,r16
call main2

loop:
	//verifica sw de limitadores
	//verifica sw de incrementar/decrementar capsulas
	ldi r16,0b11111110		//ligar motor(led1)
	out porta,r16
	//esperar sw6 ativo(sp)
	ldi r16,pind
	sbic r16,0b11011111	
	rjmp loop
		
		processo:
	call delay					
	sbic pind,0b11011111
	rjmp loop
	p:
	ldi r16,0b11111111		//desligar motor(led1)
	out porta,r16
	ldi r16,0xC0
	out portc,r16
loop2:
	sbis pind,sw1		//verifica se foi pressionado o sw para limitar n de capsulas a 6.
	jmp check_sw1
	sbis pind,sw2		//verifica se foi pressionado o sw para limitar n de capsulas a 4.
	jmp check_sw2
	sbis pind,sw3		//verifica se foi pressionado o sw para limitar n de capsulas a 2.
	jmp check_sw3

	rjmp loop2




	rjmp loop


		
;==========
;FUNCAO DE DEFINICAO DE PORTOS E ATRIBUICAO DE VALORES DEFAULT
;==========
main2:
ldi r16,0b11111111		//Set All Bits in Register como 1
out	ddra,r16			//portA led's - saidas
							//led's acendem a valor logico zero
out ddrc,r16			//portC display 7seg. - saidas
ldi r16,0b11000000
out ddrd,r16			//portD sw's + escolha disp - entrada + saida
out portd,r16			
					
ret


check_sw1:
call delay					
	sbic pind,sw1
	rjmp loop
	ldi r16,0b01111111		//ligar	VE(led8)
	out porta,r16

















delay: 
push r18                                            // guarda na memoria valor de registo r18
push r19                                            // guarda na memoria valor de registo r19
push r20                                            // guarda na memoria valor de registo r20
ldi r20, 1                                                    
ciclodelay0:
ldi r19, 150                                       
ciclodelay1:
ldi r18, 70                                      
ciclodelay2:
dec r18
brne ciclodelay2
dec r19
brne ciclodelay1
dec r20
brne ciclodelay0
dec r16                                             // decresce r16 para o ciclo de delay
pop r20                                             // recupera da memoria valor de registo r20
pop r19                                             // recupera da memoria valor de registo r19
pop r18                                             // recupera da memoria valor de registo r18
ret
