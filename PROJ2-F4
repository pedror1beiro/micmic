#include <avr/interrupt.h>



const unsigned char tabela[]= {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xFF, 0xBF}; //0xBF-->sinal menos



unsigned char tabela_display[4] = {10,10,10,10};



unsigned char switches, rot;



volatile unsigned char sentido=0, cnt=0, cnt1 =0, f_250ms=0,f_1s=0, pnt_disp = 3, rot_ant, flag_A; //sentido = 0 -> sentido horário

int cont_rot, cont_rot_ant;





void inicio(void){

	DDRA = 0b11000000;

	PORTA = 0b00000000;

	DDRC = 0xFF;

	PORTC = 0xFF;

	DDRB = 0b11100000;

	PORTB = 0b01000000; //sentido horário

	OCR0 = 77;

	TCCR0 = 0b00001111;

	TIMSK |= 0b00000010;

	OCR2 = 0;

	TCCR2 = 0b01100011; //prescaler 64

	//CONFIG. TC3

	EICRA = 0b11000000;

	EIMSK = 0b00001000;

	sei();
}

void alterar_sentido(void) {

	OCR2 = 0; // para motor

	cnt = 0;

	if (sentido == 1) {
		PORTB = 0b01000000; // sentido horario
sentido = 0;

		} else {

		PORTB = 0b00100000; // sentido anti-horario
		sentido = 1;
	}

	f_250ms = 0; // reset flag

	OCR2 = rot * (255 / 100);

}

void display(void){

	PORTA = pnt_disp << 6; // 3 -> 11000000 / 2-> 10000000 /1-> 01000000 /0-> 00000000

	PORTC = tabela[tabela_display[pnt_disp]];

	pnt_disp --;

	if (pnt_disp == 255){

		pnt_disp = 3;
	}
}

void processar_display(void){

	tabela_display[0] = cont_rot_ant/1000;
	tabela_display[1] = (cont_rot_ant%1000)/100;
	tabela_display[2] =	((cont_rot_ant%1000)%100)/10;
	tabela_display[3] =	((cont_rot_ant%1000)%100)%10;

}

void SW(){
	
	unsigned char switches = PINA & 0b00111111;
	switch (switches) {

		case 0b00111110: // SW1

		rot = 25;

	break;

		case 0b00111101: // SW2
		rot = 50;
		break;
		case 0b00111011: // SW3
		rot = 70;
		break;

	case 0b00110111: // SW4

		rot = 90;

		break;

		case 0b00101111: // SW5

		if(flag_A == 1){

		alterar_sentido();}

		flag_A = 0;

		break;

		case 0b00011111: // SW6

		rot = 0;

		break;

		case 0b00111111: //nenhum ativo

		flag_A = 1;

		break;

		default:

		break;
	}
}


ISR(INT3_vect){
	cont_rot++;
}

ISR(TIMER0_COMP_vect){

	display();

	cnt++;

	cnt1++;

	if (cnt == 50) { // 250ms ---> 5ms * 50

		f_250ms = 1;

		cnt = 0;

	}

	if(cnt1 == 200){ //1s ---> 5ms * 200

		f_1s = 1;

		cnt1 = 0;

	}
}


int main(void){



	inicio();



	while(1){



		SW();
		if(rot != rot_ant){OCR2 = rot * (255 / 100);} // Atualizar duty cycle do PWM

		if(f_1s == 1){
			
			cont_rot_ant = cont_rot;
			cont_rot = 0;
			cont_rot_ant =  cont_rot_ant*30;
			
			processar_display();
			
			f_1s = 0;
			
		}
		rot_ant = rot;
	}
}
